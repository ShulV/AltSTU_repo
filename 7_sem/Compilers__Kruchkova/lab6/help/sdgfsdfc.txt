void SyntaxAnalis::AnaliseOpAndData() {
    savePoint = scaner.GetPtr();
    saveLine = scaner.GetLine();
    scaner.scan(currentType, currentLex);
    if (currentType == type_int || currentType == type_short || currentType == type_long || currentType == type_bool || currentType == type_const) {
        scaner.SetPtr(savePoint);
        scaner.SetLine(saveLine);
        AnaliseData();
    }
    else if (currentType == type_ident) {
        scaner.scan(currentType, currentLex);
        if (currentType == type_assign) {
            AnaliseExpression();
            scaner.scan(currentType, currentLex);
            if (currentType != type_semicolon) ShowError("Not ;");
        }
        else if (currentType == type_plus_assign || currentType == type_mul_assign || currentType == type_div_assign || 
            currentType == type_minus_assign || currentType == type_mod_assign) {
            scaner.SetPtr(savePoint);
            scaner.SetLine(saveLine);
            AnaliseBitSave();
        }
        else if (currentType == type_plus_plus || currentType == type_minus_minus) {
            scaner.SetPtr(savePoint);
            scaner.SetLine(saveLine);
            AnaliseInc();
        }
        else {
            ShowError("Not = or function");
        }
    }
    else if (currentType == type_plus_plus || currentType == type_minus_minus) {
        scaner.SetPtr(savePoint);
        scaner.SetLine(saveLine);
        AnaliseInc();
    }
    else if (currentType == type_lparenthesis) {
        scaner.SetPtr(savePoint);
        scaner.SetLine(saveLine);
        AnaliseSosOp();
    }
    else if (currentType == type_switch) {
        scaner.SetPtr(savePoint);
        scaner.SetLine(saveLine);
        AnaliseSwitch();
    }
    else if(currentType != type_semicolon) ShowError("Not operator or data");
}