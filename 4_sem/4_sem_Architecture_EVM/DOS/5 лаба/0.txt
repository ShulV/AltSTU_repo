		; программа вычисляет Y:= F(X,Y) + F(Y,X) - F(2,3)
jmp begin		;
.org 2			; программные прерывания
.db 70			;
.org 3			;
.db 80			;

.org 8			;зарезервировать соответствующие
.db 0A5			;ячейки для аппаратных прерываний
.org 9			;
.db 0E0	

	


begin: mvi a,X			;
int 2 			; Программное прерывание на ввод
		; ПОСЧЁТ Y
load a,X		;
load b,Y		;
call FUNC		; вызов функции и подсчёт F(X,Y)
push a			; положить F(X,Y) в стек из rA
load a,Y		; скопировать содержимое о адресу Y в rA
load b,X		; скопировать содержимое о адресу X в rB 
call FUNC		; вызов функции и подсчёт F(Y,X)
pop b			; вытянуть F(X,Y) из стека в rB
OLDP: adr a,b		; сложение F(Y,X)+F(X,Y) (rA + rB, рез. в rA)
push a			; положить F(Y,X)+F(X,Y) в стек из rA
mvi a,2			; непосредственная загрузка 2 в rA
mvi b,3			; непосредственная загрузка 3 в rB 
call FUNC		; вызов функции и подсчёт F(Y,X)
pop b			; вытянуть F(Y,X)+F(X,Y) из стека в rB
xchg			; обмен регистров (rA и rB обмениваются содержимым)
OLDM: sbr a,b		; [F(Y,X)+F(X,Y)] - F(2,3), рез. в rA
int 3 			; Программное прерывание на вывод
stop			; останов
X: .ds 1		; резервир. 1 байта под X
Y: .ds 1		; резервир. 1 байта под Y

		; подпрограмма вычисления F(A,B)= (B*B-1) + (A+B)*(A+B)
		; вход: (rA) - A; (rB) - B
		; выход: (rA) - (B*B-1) + (A+B)*(A+B)
FUNC: push b		; положить B из rB в стек 
adr a,b			; сложение регистров (rA + rB, рез. в rA)
xchg			; обмен rA и rB содержимым (A+B в rB)
mur a,b			; умножение (A+B)^2 ((A+B) в R+1 т.е. в rB
			; умножается на (A+B) в rB) рез. - в паре рег.
pop a			; вытянуть B из стека в rA
push b			; положить (A+B)^2 в стек
xchg			; обмен rA и rB содержимым (A+B в rB)
mur a,b			; умножение B*B (B в R+1 т.е. в rB
			; умножается на B в rB) рез. - в паре рег.
sbi b,1			; B*B-1 (непосред. вычит. rB-1) рез. в rB
pop a			; вытянуть (A+B)^2 из стека
adr a,b			; [B*B-1]+[(A+B)^2] (rA+rB, рез. в rA)
ret			; возврат в вызывающую программу

			; 1 программное прерывание (Вызов - int 2)
			; 0(b) - адрес X
			; 1(b) - адрес Y
.org 70			; устан. Знач. счетчика адр. команд равным абс. адресу 70
di 			; Запретить прерывания
push b 			; Сохранить состояние rB
mov b, a		;
in 0 			; Ввод X
stor a, 0(b) 		; Запомнить X по адресу X
in 1 			; Ввод Y
stor a, 1(b) 		; Запомнить В по адресу Y
pop b			; Восстановить состояние rA

ei 			; Разрешить прерывания
rin 			; Возврат из прерывания

			; 2 программное прерывание (Вызов - int 3)
.org 80 		; устан. Знач. счетчика адр. команд равным абс. адресу 80
di 			; Запретить прерывания
out 2			; вывести в канал 2
ei 			; Разрешить прерывания
rin 			; Возврат из прерывания


			; апп. прерывание №1
			; изменение знаков “-” на “+”  и “+” на “-” в алгоритме подпрограммы
			; и рестарт программы с очисткой стека и рабочих переменных
.org 0A5		;
di 			; Запретить прерывания
load a,X		;

ei 			; Разрешить прерывания
rin 			; Выход из прерывания

			; апп. прерывание №2
.org 0E0		;
di 			; Запретить прерывания


ei 			; Разрешить прерывания
rin 			; Выход из прерывания